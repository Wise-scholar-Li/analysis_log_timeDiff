using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace AutoChart
{
    class commProtocol
    {

        static byte[] encryptionArray = new byte[] {
            0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
            0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
            0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
            0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
            0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
            0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
            0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
            0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
            0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
            0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
            0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40,
            0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
            0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
            0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
            0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0
        };
        static byte[] decryptionArray = new byte[] {
            0x80, 0x83, 0x86, 0x85, 0x8f, 0x8c, 0x89, 0x8a, 0x9e, 0x9d, 0x98, 0x9b, 0x91, 0x92, 0x97, 0x94,
            0xbf, 0xbc, 0xb9, 0xba, 0xb0, 0xb3, 0xb6, 0xb5, 0xa1, 0xa2, 0xa7, 0xa4, 0xae, 0xad, 0xa8, 0xab,
            0xfe, 0xfd, 0xf8, 0xfb, 0xf1, 0xf2, 0xf7, 0xf4, 0xe0, 0xe3, 0xe6, 0xe5, 0xef, 0xec, 0xe9, 0xea,
            0xc1, 0xc2, 0xc7, 0xc4, 0xce, 0xcd, 0xc8, 0xcb, 0xdf, 0xdc, 0xd9, 0xda, 0xd0, 0xd3, 0xd6, 0xd5,
            0x7f, 0x7c, 0x79, 0x7a, 0x70, 0x73, 0x76, 0x75, 0x61, 0x62, 0x67, 0x64, 0x6e, 0x6d, 0x68, 0x6b,
            0x40, 0x43, 0x46, 0x45, 0x4f, 0x4c, 0x49, 0x4a, 0x5e, 0x5d, 0x58, 0x5b, 0x51, 0x52, 0x57, 0x54,
            0x01, 0x02, 0x07, 0x04, 0x0e, 0x0d, 0x08, 0x0b, 0x1f, 0x1c, 0x19, 0x1a, 0x10, 0x13, 0x16, 0x15,
            0x3e, 0x3d, 0x38, 0x3b, 0x31, 0x32, 0x37, 0x34, 0x20, 0x23, 0x26, 0x25, 0x2f, 0x2c, 0x29, 0x2a,
            0x7e, 0x7d, 0x78, 0x7b, 0x71, 0x72, 0x77, 0x74, 0x60, 0x63, 0x66, 0x65, 0x6f, 0x6c, 0x69, 0x6a,
            0x41, 0x42, 0x47, 0x44, 0x4e, 0x4d, 0x48, 0x4b, 0x5f, 0x5c, 0x59, 0x5a, 0x50, 0x53, 0x56, 0x55,
            0x00, 0x03, 0x06, 0x05, 0x0f, 0x0c, 0x09, 0x0a, 0x1e, 0x1d, 0x18, 0x1b, 0x11, 0x12, 0x17, 0x14,
            0x3f, 0x3c, 0x39, 0x3a, 0x30, 0x33, 0x36, 0x35, 0x21, 0x22, 0x27, 0x24, 0x2e, 0x2d, 0x28, 0x2b,
            0x81, 0x82, 0x87, 0x84, 0x8e, 0x8d, 0x88, 0x8b, 0x9f, 0x9c, 0x99, 0x9a, 0x90, 0x93, 0x96, 0x95,
            0xbe, 0xbd, 0xb8, 0xbb, 0xb1, 0xb2, 0xb7, 0xb4, 0xa0, 0xa3, 0xa6, 0xa5, 0xaf, 0xac, 0xa9, 0xaa,
            0xff, 0xfc, 0xf9, 0xfa, 0xf0, 0xf3, 0xf6, 0xf5, 0xe1, 0xe2, 0xe7, 0xe4, 0xee, 0xed, 0xe8, 0xeb,
            0xc0, 0xc3, 0xc6, 0xc5, 0xcf, 0xcc, 0xc9, 0xca, 0xde, 0xdd, 0xd8, 0xdb, 0xd1, 0xd2, 0xd7, 0xd4,
        };


        // 高位字节的CRC 值
        static byte[] gpbtCRCLo = new byte[]
        {
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
            0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,  0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,  0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,  0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
            0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,  0x81,0x40,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
            0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,  0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
            0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
            0x01,0xc0,0x80,0x41,0x00,0xc1,0x81,0x40,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40,0x00,0xc1,0x81,0x40,
            0x01,0xc0,0x80,0x41,0x01,0xc0,0x80,0x41,0x00,0xc1,  0x81,0x40,0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,
            0x00,0xc1,0x81,0x40,0x01,0xc0,0x80,0x41,0x01,0xc0,  0x80,0x41,0x00,0xc1,0x81,0x40
        };


        // 低位字节的CRC 值
        static byte[] gpbtCRCHi = new byte[]
        {
            0x00,0xc0,0xc1,0x01,0xc3,0x03,0x02,0xc2,0xc6,0x06,  0x07,0xc7,0x05,0xc5,0xc4,0x04,0xcc,0x0c,0x0d,0xcd,
            0x0f,0xcf,0xce,0x0e,0x0a,0xca,0xcb,0x0b,0xc9,0x09,  0x08,0xc8,0xd8,0x18,0x19,0xd9,0x1b,0xdb,0xda,0x1a,
            0x1e,0xde,0xdf,0x1f,0xdd,0x1d,0x1c,0xdc,0x14,0xd4,  0xd5,0x15,0xd7,0x17,0x16,0xd6,0xd2,0x12,0x13,0xd3,
            0x11,0xd1,0xd0,0x10,0xf0,0x30,0x31,0xf1,0x33,0xf3,  0xf2,0x32,0x36,0xf6,0xf7,0x37,0xf5,0x35,0x34,0xf4,
            0x3c,0xfc,0xfd,0x3d,0xff,0x3f,0x3e,0xfe,0xfa,0x3a,  0x3b,0xfb,0x39,0xf9,0xf8,0x38,0x28,0xe8,0xe9,0x29,
            0xeb,0x2b,0x2a,0xea,0xee,0x2e,0x2f,0xef,0x2d,0xed,  0xec,0x2c,0xe4,0x24,0x25,0xe5,0x27,0xe7,0xe6,0x26,
            0x22,0xe2,0xe3,0x23,0xe1,0x21,0x20,0xe0,0xa0,0x60,  0x61,0xa1,0x63,0xa3,0xa2,0x62,0x66,0xa6,0xa7,0x67,
            0xa5,0x65,0x64,0xa4,0x6c,0xac,0xad,0x6d,0xaf,0x6f,  0x6e,0xae,0xaa,0x6a,0x6b,0xab,0x69,0xa9,0xa8,0x68,
            0x78,0xb8,0xb9,0x79,0xbb,0x7b,0x7a,0xba,0xbe,0x7e,  0x7f,0xbf,0x7d,0xbd,0xbc,0x7c,0xb4,0x74,0x75,0xb5,
            0x77,0xb7,0xb6,0x76,0x72,0xb2,0xb3,0x73,0xb1,0x71,  0x70,0xb0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
            0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9c,0x5c,  0x5d,0x9d,0x5f,0x9f,0x9e,0x5e,0x5a,0x9a,0x9b,0x5b,
            0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4b,0x8b,  0x8a,0x4a,0x4e,0x8e,0x8f,0x4f,0x8d,0x4d,0x4c,0x8c,
            0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,  0x43,0x83,0x41,0x81,0x80,0x40
        };

        const byte recvXor = 0x9C;

        public enum sendCmdType
        {
            queryCmd,
            detectionCmd,
            protocolOpenCmd,
            debugOpenCmd,
            softUpdataCmd

        }

        public static byte[] buildEncryptionPack(sendCmdType cmd, byte subcmd, byte[] Data, Int32 Length)
        {

            UInt32 i = 0;
            byte[] retData = new byte[Length + 12];
            retData[0] = 0x23;
            retData[1] = 0x55;
            retData[2] = (byte)(Length + 9);
            switch (cmd)
            {
                case sendCmdType.queryCmd:
                    retData[3] = 1;
                    break;
                case sendCmdType.detectionCmd:
                    retData[3] = 2;
                    break;
                case sendCmdType.protocolOpenCmd:
                    retData[3] = 0x10;
                    break;
                case sendCmdType.debugOpenCmd:
                    retData[3] = 0x11;
                    break;
                case sendCmdType.softUpdataCmd:
                    retData[3] = 0x30;
                    break;
                default:
                    retData[3] = 1;
                    break;
            }

            Random rd = new Random();
            byte[] Randvalue = new byte[4];
            Randvalue[0] = (byte)rd.Next(0,255);
            Randvalue[1] = (byte)rd.Next(0, 255);
            Randvalue[2] = (byte)rd.Next(0, 255);
            Randvalue[3] = (byte)rd.Next(0, 255);
            byte[] midValue = new byte[4];

            retData[4] = (byte)(subcmd ^ Randvalue[0]);
            for (i = 0; i < Length; i++)
            {
                retData[i+9] = (byte)(Data[i] ^ Randvalue[(i+5) % 4]);
            }
            for (i = 0; i < 4; i++)
            {
                midValue[0] = encryptionArray[Randvalue[0]];
                midValue[1] = encryptionArray[Randvalue[1]];
                midValue[2] = encryptionArray[Randvalue[2]];
                midValue[3] = encryptionArray[Randvalue[3]];
                Randvalue[0] = (byte)((midValue[0] & 0xC0) + (midValue[1] & 0x30) + (midValue[2] & 0x0C) + (midValue[3] & 0x03));
                Randvalue[1] = (byte)((midValue[1] & 0xC0) + (midValue[2] & 0x30) + (midValue[3] & 0x0C) + (midValue[0] & 0x03));
                Randvalue[2] = (byte)((midValue[2] & 0xC0) + (midValue[3] & 0x30) + (midValue[0] & 0x0C) + (midValue[1] & 0x03));
                Randvalue[3] = (byte)((midValue[3] & 0xC0) + (midValue[0] & 0x30) + (midValue[1] & 0x0C) + (midValue[2] & 0x03));

            }
            retData[5] = Randvalue[0];
            retData[6] = Randvalue[1];
            retData[7] = Randvalue[2];
            retData[8] = Randvalue[3];

            long crc = crc16(retData, 0, Length + 9, 0);
            retData[Length + 9] = (byte)((crc >> 8) & 0xff);
            retData[Length + 10] = (byte)(crc & 0xff);
            retData[Length + 11] = 0x0A;

            for (i = 0; i < retData.Length; i++)
            {
                retData[i] ^= 0xaa;
            }
            return retData;

        }

        public static void EncryptionOperation(byte[] Data, UInt32 Length)
        {
            UInt32 i = 0;
            byte[] Randvalue = new byte[] { Data[1], Data[2], Data[3], Data[4] };
            byte[] midValue = new byte[4];

            Data[0] =(byte) (Data[0] ^ Randvalue[0]);
            for (i = 5; i < Length; i++)
            {
                Data[i] = (byte)(Data[i] ^ Randvalue[i % 4]);
            }
            for (i = 0; i < 4; i++)
            {
                midValue[0] = encryptionArray[Randvalue[0]];
                midValue[1] = encryptionArray[Randvalue[1]];
                midValue[2] = encryptionArray[Randvalue[2]];
                midValue[3] = encryptionArray[Randvalue[3]];
                Randvalue[0] = (byte)((midValue[0] & 0xC0) + (midValue[1] & 0x30) + (midValue[2] & 0x0C) + (midValue[3] & 0x03));
                Randvalue[1] = (byte)((midValue[1] & 0xC0) + (midValue[2] & 0x30) + (midValue[3] & 0x0C) + (midValue[0] & 0x03));
                Randvalue[2] = (byte)((midValue[2] & 0xC0) + (midValue[3] & 0x30) + (midValue[0] & 0x0C) + (midValue[1] & 0x03));
                Randvalue[3] = (byte)((midValue[3] & 0xC0) + (midValue[0] & 0x30) + (midValue[1] & 0x0C) + (midValue[2] & 0x03));

            }
            Data[1] = Randvalue[0];
            Data[2] = Randvalue[1];
            Data[3] = Randvalue[2];
            Data[4] = Randvalue[3];

            return;
        }

        public static void DecryptionOperation(byte[] Data,int offset, int Length)
        {
            byte i = 0;
            byte[] Randvalue = new byte[] { Data[offset + 1], Data[offset + 2], Data[offset + 3], Data[offset + 4] };
            byte[] midValue = new byte[4];

            for (i = 0; i < 4; i++)
            {
                midValue[0] = (byte)((Randvalue[0] & 0xC0) + (Randvalue[1] & 0x03) + (Randvalue[2] & 0x0C) + (Randvalue[3] & 0x30));
                midValue[1] = (byte)((Randvalue[0] & 0x30) + (Randvalue[1] & 0xC0) + (Randvalue[2] & 0x03) + (Randvalue[3] & 0x0C));
                midValue[2] = (byte)((Randvalue[0] & 0x0C) + (Randvalue[1] & 0x30) + (Randvalue[2] & 0xC0) + (Randvalue[3] & 0x03));
                midValue[3] = (byte)((Randvalue[0] & 0x03) + (Randvalue[1] & 0x0C) + (Randvalue[2] & 0x30) + (Randvalue[3] & 0xC0));

                Randvalue[0] = decryptionArray[midValue[0]];
                Randvalue[1] = decryptionArray[midValue[1]];
                Randvalue[2] = decryptionArray[midValue[2]];
                Randvalue[3] = decryptionArray[midValue[3]];

            }
            Data[offset + 0] = (byte)(Data[offset + 0] ^ Randvalue[0]);
            Data[offset + 1] = Randvalue[0];
            Data[offset + 2] = Randvalue[1];
            Data[offset + 3] = Randvalue[2];
            Data[offset + 4] = Randvalue[3];

            for(i=5; i<Length; i++)
            {
                Data[offset + i] = (byte)(Data[offset + i] ^ Randvalue[i % 4]);
            }

            return;
        }


        public static byte[] buildNoDataPack(sendCmdType cmd, byte subCmd)
        {
            byte[] buf = new byte[8];
            buf[0] = 0x23;
            buf[1] = 0x55;
            buf[2] = (byte)(5);
            switch (cmd)
            {
                case sendCmdType.queryCmd:
                    buf[3] = 1;
                    break;
                case sendCmdType.protocolOpenCmd:
                    buf[3] = 0x10;
                    break;
                case sendCmdType.debugOpenCmd:
                    buf[3] = 0x11;
                    break;
                case sendCmdType.softUpdataCmd:
                    buf[3] = 0x30;
                    break;
                default:
                    buf[3] = 1;
                    break;
            }
            buf[4] = subCmd;
            long crc = crc16(buf, 0, 5, 0);
            buf[5] = (byte)((crc >> 8) & 0xff);
            buf[6] = (byte)(crc & 0xff);
            buf[7] = 0x0A;

            for (int i = 0; i < 8; i++)
            {
                buf[i] ^= 0xaa;
            }
            return buf;
        }

        public static byte[] buildPack(sendCmdType cmd, byte subCmd, byte[] data, int offset, int datalength)
        {
            byte[] buf = new byte[datalength + 8];
            buf[0] = 0x23;
            buf[1] = 0x55;
            buf[2] = (byte)(datalength + 5);
            switch (cmd)
            {
                case sendCmdType.queryCmd:
                    buf[3] = 1;
                    break;
                case sendCmdType.protocolOpenCmd:
                    buf[3] = 0x10;
                    break;
                case sendCmdType.debugOpenCmd:
                    buf[3] = 0x11;
                    break;
                case sendCmdType.softUpdataCmd:
                    buf[3] = 0x30;
                    break;
                default:
                    buf[3] = 1;
                    break;
            }
            buf[4] = subCmd;
            Array.Copy(data, offset, buf, 5, datalength);

            long crc = crc16(buf, 0, datalength + 5, 0);
            buf[datalength + 5] = (byte)((crc >> 8) & 0xff);
            buf[datalength + 6] = (byte)(crc & 0xff);
            buf[datalength + 7] = 0x0A;

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] ^= 0xaa;
            }
            return buf;
        }

        public static int getPackages(byte[] srcData, int length, List<byte[]> packList)
        {
        #if (false)
            for (int i = 0; i < length; i++)
            {
                if (length - i < 11)
                {
                    return i;
                }
                if (srcData[i] == 0x58 && srcData[i + 1] == 0x48)
                {
                    if ((srcData[i + 7] + 10) > (length - i))
                    {
                        return i;
                    }
                    else if (srcData[srcData[i + 7] + 8] == 0x0D && srcData[srcData[i + 7] + 9] == 0x0A)
                    {
                        byte[] onePack = new byte[srcData[i + 7] + 10];     // all data!

                        for (int j = 0; j < onePack.Length; j++)
                        {
                            onePack[j] = srcData[i + j];
                        }
                        //Array.Copy(srcData, i, onePack, 0, onePack.Length);
                        packList.Add(onePack);
                        i += (onePack.Length - 1);
                    }
                }

            }
            return length;

        #else
            if(length > 5)
            {
                byte[] onePack = new byte[length];
                for (int j = 0; j < onePack.Length; j++)
                {
                    onePack[j] = srcData[j];
                }
                packList.Add(onePack);
            }
            return length;
        #endif
        }

        public static bool checkPack(byte[] data, int startIdx, int length)
        {
            if (length < 8 || (data[startIdx + 0] ^ recvXor) != 0x23 || (data[startIdx + 1] ^ recvXor) != 0x55 || ((data[startIdx + 2] ^ recvXor) + 3) != length
                    || crc16(data, startIdx, length - 1, recvXor) != 0 || (data[startIdx + length - 1] ^ recvXor) != 0x0A)
            {
                return false;
            }
            return true;
        }


        public static long crc16(byte[] data, int startIdx, int length, byte xor)
        {
            int hi, lo, idx;
            hi = 0xff;
            lo = 0xff;

            for(int i = 0; i < length; i++)
            {
                idx = hi ^ (data[i + startIdx]^xor);
                hi = lo ^ gpbtCRCLo[idx];
                lo = gpbtCRCHi[idx];
            }
            return hi * 256 + lo;
        }
    }
}
